<Project InitialTargets="InitWindowsDesktopTempTools">
  <PropertyGroup>
    <InitWindowsDesktopTempToolsDependsOn>
      _EnsureWindowsDesktopToolsTempPath;
      _GetPathToDependentBinaries;;
      _CopyWindowsDesktopToolsToTempPath;
      _CopyUpdatedSystemReflectionMetadataLoadContextAssembly;
      _LoadAssemblyResolverForSystemReflectionMetadataLoadContext;
      $(InitWindowsDesktopTempToolsDependsOn)
    </InitWindowsDesktopTempToolsDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <MarkupCompilePass1DependsOn>
      _ReplaceSystemReflectionMetadataLoadContextInMarkupCompilePass1References;
      $(MarkupCompilePass1DependsOn)
    </MarkupCompilePass1DependsOn>
  </PropertyGroup>

  <Target Name="_EnsureWindowsDesktopToolsTempPath">
    <Delete Files="$(_WindowsDesktopToolsPlaceholderTempFile)" />
    <MakeDir Directories="$(_WindowsDesktopToolsPlaceholderTempFile)" />
  </Target>

  <Target Name="_GetPathToDependentBinaries">
    <ItemGroup>
      <TempProject Include="Project">
        <Body>
          <![CDATA[
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <TargetFramework>$(TargetFramework)</TargetFramework>
          </PropertyGroup>
          <ItemGroup>
            <PackageReference Include="System.Reflection.MetadataLoadContext" Version="%24(SystemReflectionMetadataLoadContextVersion)" GeneratePathProperty="true" />
          </ItemGroup>
          
          <Target Name="IdentifyDependentBinaryLocations" Outputs="%40(DependentAssemblyLocations)" AfterTargets="ResolveAssemblyReferences">
            <ItemGroup>
              <DependentAssemblyLocations Include="%40(ReferencePath)" Condition="'%25(ReferencePath.NuGetPackageId)'=='System.Reflection.MetadataLoadContext' And '%25(ReferencePath.FileName)'=='System.Reflection.MetadataLoadContext'"/>
            </ItemGroup>
          </Target>
        </Project>
        ]]>
        </Body>
      </TempProject>
    </ItemGroup>

    <PropertyGroup>
      <_HelperProjectFolder>$(_WindowsDesktopToolsPlaceholderTempFile)\helper\</_HelperProjectFolder>
    </PropertyGroup>
    <MakeDir Directories="$(_HelperProjectFolder)" />
    <WriteLinesToFile File="$(_HelperProjectFolder)Directory.Build.props" Lines="&lt;Project/>" />
    <WriteLinesToFile File="$(_HelperProjectFolder)Directory.Build.targets" Lines="&lt;Project/>" />
    <WriteLinesToFile File="$(_HelperProjectFolder)Helper.csproj" Lines="%(TempProject.Body)" Overwrite="true" />

    <MSBuild Projects="$(_HelperProjectFolder)Helper.csproj"
             Targets="Restore;Build;IdentifyDependentBinaryLocations"
             UnloadProjectsOnCompletion="true"
             Properties="TargetFramework=$(TargetFramework);SystemReflectionMetadataLoadContextVersion=$(_SystemReflectionMetadataLoadContextVersion)">
      <Output TaskParameter="TargetOutputs" ItemName="DependentAssemblyLocations"/>
    </MSBuild>
    <ItemGroup>
      <!-- Don't need Helper.dll -->
      <DependentAssemblyLocations Remove="@(DependentAssemblyLocations)" Condition="'%(FileName)' == 'Helper'" />
      <SystemReflectionMetadataLoadContextLocation Include="@(DependentAssemblyLocations->'%(RootDir)%(Directory)')" Condition="'%(FileName)' == 'System.Reflection.MetadataLoadContext'" />
    </ItemGroup>
    <PropertyGroup>
      <PkgSystem_Reflection_MetadataLoadContext Condition="'$(PkgSystem_Reflection_MetadataLoadContext)' ==''">@(SystemReflectionMetadataLoadContextLocation)</PkgSystem_Reflection_MetadataLoadContext>
      <PkgSystem_Reflection_MetadataLoadContext>$([MSBuild]::Unescape($([System.IO.Path]::GetFullPath("$(PkgSystem_Reflection_MetadataLoadContext)..\..\"))))</PkgSystem_Reflection_MetadataLoadContext>
    </PropertyGroup>
    <RemoveDir Directories="$(_HelperProjectFolder)" ContinueOnError="true"/>
  </Target>

  <Target Name="_CopyWindowsDesktopToolsToTempPath">
    <PropertyGroup>
      <_WindowsDesktopToolsSource>$([MSBuild]::Unescape($([System.IO.Path]::GetFullPath('$(MicrosoftWindowsDesktopSdkPath)\..\tools\$(MSBuildTfm)\'))))</_WindowsDesktopToolsSource>
    </PropertyGroup>
    
    <ItemGroup>
      <_WindowsDesktopTools Include="$(_WindowsDesktopToolsSource)**/*" />
    </ItemGroup>
    
    <MakeDir Directories="@(_WindowsDesktopTools->'$(_WindowsDesktopToolsTempPath)\%(RecursiveDir)'->Distinct())" />
    
    <Copy SourceFiles="@(_WindowsDesktopTools)"
          DestinationFiles="@(_WindowsDesktopTools->'$(_WindowsDesktopToolsTempPath)\%(RecursiveDir)%(FileName)%(Extension)')"
          SkipUnchangedFiles="true"/>
  </Target>

  <Target Name="_CopyUpdatedSystemReflectionMetadataLoadContextAssembly"
          Condition="'$(PkgSystem_Reflection_MetadataLoadContext)' != ''">
    <Copy SourceFiles="$(PkgSystem_Reflection_MetadataLoadContext)\lib\$(_SystemReflectionMetadataLoadContextTfm)\System.Reflection.MetadataLoadContext.dll"
          DestinationFolder="$(_WindowsDesktopToolsTempPath)"
          OverwriteReadOnlyFiles="true"
          SkipUnchangedFiles="true" />
  </Target>


  <UsingTask TaskName="_AssemblyResolverForSystemReflectionMetadataLoadContext"
             TaskFactory="RoslynCodeTaskFactory"
             AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <AssemblyName ParameterType="System.String" Required="true" />
      <WindowsDesktopToolsTempPath ParameterType="System.String"  Required="true"/>
    </ParameterGroup>
    <Task>
      <Code Type="class" Language="cs">
      <![CDATA[
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Reflection;
public class _AssemblyResolverForSystemReflectionMetadataLoadContext : Microsoft.Build.Utilities.Task
{
  public _AssemblyResolverForSystemReflectionMetadataLoadContext()
  {
    AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(OnAppDomainAssemblyResolve);
  }
  
  public override bool Execute()
  {
        var a = Assembly.LoadFrom(AssemblyName);
        if (a != null)
        {
            Log.LogMessage("Successfully Loaded " + AssemblyName);
        }
      return true;
  }
    
    private Assembly OnAppDomainAssemblyResolve(object sender, ResolveEventArgs args)
    {
        // Use a WeakReference to the logger - see https://github.com/NuGet/Home/issues/8688
        var weakRefLog = new WeakReference<TaskLoggingHelper>(Log);

        var dllName = new AssemblyName(args.Name);

        LogMessage(weakRefLog, "DLL: { " + dllName.Name + ", " + dllName.Version.ToString() + " }");

        if (dllName.Name.Equals("System.Reflection.MetadataLoadContext", StringComparison.OrdinalIgnoreCase))
        {
            if (dllName.Version == new Version(4, 0, 1, 0))
            {
                LogMessage(weakRefLog, "Redirecting System.Reflection.MetadataLoadContext, Version=4.0.1.0 to System.Reflection.MetadataLoadContext, Version=4.0.1.1");

                dllName.Version = new Version(4, 0, 1, 1);
                return Assembly.Load(dllName);
            }

            if (dllName.Version == new Version(4, 0, 1, 1))
            {
                LogMessage(weakRefLog, "Loading System.Reflection.MetadataLoadContext, Version=4.0.1.1 from " + WindowsDesktopToolsTempPath);
                var path = Path.Combine(WindowsDesktopToolsTempPath, "System.Reflection.MetadataLoadContext.dll");
                return Assembly.LoadFrom(path);
            }
        }

        LogMessage(weakRefLog, "Failed to resolve " + dllName);
        return null;
    }
  
    private Assembly LoadAssembly(AssemblyName dllName)
    {
        var weakRefLog = new WeakReference<TaskLoggingHelper>(Log);

        if (!string.IsNullOrEmpty(WindowsDesktopToolsTempPath) &&
            Directory.Exists(WindowsDesktopToolsTempPath))
        {
            var file = Path.Combine(WindowsDesktopToolsTempPath, dllName.FullName);
            if (File.Exists(file))
            {
                LogMessage(weakRefLog, "Loading from " + file);
                return Assembly.LoadFrom(file);
            }
        }

        LogMessage(weakRefLog, "Loading from " + dllName.Name);
        return Assembly.Load(dllName);
    }
  
    private static void LogMessage(WeakReference<TaskLoggingHelper> weakRefLog, string message)
    {
        if (weakRefLog.TryGetTarget(out TaskLoggingHelper log))
        {
            log.LogMessage(message);
        }
    }

    private static void LogWarning(WeakReference<TaskLoggingHelper> weakRefLog, string message)
    {
        if (weakRefLog.TryGetTarget(out TaskLoggingHelper log))
        {
            log.LogWarning(message);
        }
    }

    private static void LogError(WeakReference<TaskLoggingHelper> weakRefLog, string message)
    {
        if (weakRefLog.TryGetTarget(out TaskLoggingHelper log))
        {
            log.LogError(message);
        }
    }
    
    public virtual string AssemblyName { get; set; }
    
    public virtual string WindowsDesktopToolsTempPath { get; set; }

}
      ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="_LoadAssemblyResolverForSystemReflectionMetadataLoadContext">
    <_AssemblyResolverForSystemReflectionMetadataLoadContext AssemblyName="$(_WindowsDesktopToolsTempPath)\PresentationBuildTasks.dll"
                                                            WindowsDesktopToolsTempPath="$(_WindowsDesktopToolsTempPath)"/>
  </Target>

  <Target Name="_ReplaceSystemReflectionMetadataLoadContextInMarkupCompilePass1References">
    <ItemGroup>
      <ReferencePath Remove="@(ReferencePath)" Condition="'%(FileName)' == 'System.Reflection.MetadataLoadContext'" />
      <ReferencePath Include="$(_WindowsDesktopToolsTempPath)\System.Reflection.MetadataLoadContext.dll" />
    </ItemGroup>
  </Target>

  <Target Name="InitWindowsDesktopTempTools" 
          DependsOnTargets="$(InitWindowsDesktopTempToolsDependsOn)" />
</Project>