<Project InitialTargets="InitWindowsDesktopTempTools">
  <PropertyGroup>
    <InitWindowsDesktopTempToolsDependsOn>
      EnsureWindowsDesktopToolsTempPath;
      GetPathToDependentBinaries;;
      CopyWindowsDesktopToolsToTempPath;
      CopyUpdatedSystemReflectionMetadataLoadContextAssembly;
      CopyMonoCecilBinariesToTempPath;
      RewritePresentationBuildTasksReferenceToSystemReflectionMetadataLoadContextAssembly;
      $(InitWindowsDesktopTempToolsDependsOn)
    </InitWindowsDesktopTempToolsDependsOn>
  </PropertyGroup>

  <Target Name="EnsureWindowsDesktopToolsTempPath">
    <Delete Files="$(_WindowsDesktopToolsPlaceholderTempFile)" />
    <MakeDir Directories="$(_WindowsDesktopToolsPlaceholderTempFile)" />
  </Target>

  <Target Name="CopyWindowsDesktopToolsToTempPath">
    <PropertyGroup>
      <_WindowsDesktopToolsSource>$([MSBuild]::Unescape($([System.IO.Path]::GetFullPath('$(MicrosoftWindowsDesktopSdkPath)\..\tools\$(MSBuildTfm)\'))))</_WindowsDesktopToolsSource>
    </PropertyGroup>
    
    <ItemGroup>
      <_WindowsDesktopTools Include="$(_WindowsDesktopToolsSource)**/*" />
    </ItemGroup>
    
    <MakeDir Directories="@(_WindowsDesktopTools->'$(_WindowsDesktopToolsTempPath)\%(RecursiveDir)'->Distinct())" />
    
    <Copy SourceFiles="@(_WindowsDesktopTools)"
          DestinationFiles="@(_WindowsDesktopTools->'$(_WindowsDesktopToolsTempPath)\%(RecursiveDir)%(FileName)%(Extension)')"
          SkipUnchangedFiles="true"/>
  </Target>

  <Target Name="CopyUpdatedSystemReflectionMetadataLoadContextAssembly"
          Condition="'$(PkgSystem_Reflection_MetadataLoadContext)' != ''">
    <Copy SourceFiles="$(PkgSystem_Reflection_MetadataLoadContext)\lib\$(_SystemReflectionMetadataLoadContextTfm)\System.Reflection.MetadataLoadContext.dll"
          DestinationFolder="$(_WindowsDesktopToolsTempPath)"
          OverwriteReadOnlyFiles="true"
          SkipUnchangedFiles="true" />
  </Target>

  <Target Name="CopyMonoCecilBinariesToTempPath">
    <MakeDir Directories="$(_MonoCecilDirectory)" />
    <ItemGroup>
      <_SourceFiles Include="$(PkgMono_Cecil)\lib\$(_MonoCecilTfm)\*.dll" />
    </ItemGroup>
    <Copy SourceFiles="@(_SourceFiles)"
          DestinationFolder="$(_MonoCecilDirectory)"
          SkipUnchangedFiles="true"/>
  </Target>

  <Target Name="GetPathToDependentBinaries">
    <ItemGroup>
      <TempProject Include="Project">
        <Body>
            <![CDATA[
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <TargetFramework>$(TargetFramework)</TargetFramework>
          </PropertyGroup>
          <ItemGroup>
            <PackageReference Include="Mono.Cecil" Version="%24(MonoCecilVersion)" GeneratePathProperty="true" />
            <PackageReference Include="System.Reflection.MetadataLoadContext" Version="%24(SystemReflectionMetadataLoadContextVersion)" GeneratePathProperty="true" />
          </ItemGroup>
          
          <Target Name="IdentifyDependentBinaryLocations" Outputs="%40(DependentAssemblyLocations)" AfterTargets="ResolveAssemblyReferences">
            <ItemGroup>
              <DependentAssemblyLocations Include="%40(ReferencePath)" Condition="'%25(ReferencePath.NuGetPackageId)'=='Mono.Cecil' And '%25(ReferencePath.FileName)'=='Mono.Cecil'"/>
              <DependentAssemblyLocations Include="%40(ReferencePath)" Condition="'%25(ReferencePath.NuGetPackageId)'=='System.Reflection.MetadataLoadContext' And '%25(ReferencePath.FileName)'=='System.Reflection.MetadataLoadContext'"/>
            </ItemGroup>
          </Target>
        </Project>
        ]]></Body>
      </TempProject>
    </ItemGroup>

    <PropertyGroup>
      <_HelperProjectFolder>$(_WindowsDesktopToolsPlaceholderTempFile)\helper\</_HelperProjectFolder>
    </PropertyGroup>
    <MakeDir Directories="$(_HelperProjectFolder)" />
    <WriteLinesToFile File="$(_HelperProjectFolder)Directory.Build.props" Lines="&lt;Project/>" />
    <WriteLinesToFile File="$(_HelperProjectFolder)Directory.Build.targets" Lines="&lt;Project/>" />
    <WriteLinesToFile File="$(_HelperProjectFolder)Helper.csproj" Lines="%(TempProject.Body)" Overwrite="true" />

    <MSBuild Projects="$(_HelperProjectFolder)Helper.csproj"
             Targets="Restore;Build;IdentifyDependentBinaryLocations"
             UnloadProjectsOnCompletion="true"
             Properties="TargetFramework=$(TargetFramework);MonoCecilVersion=$(_MonoCecilVersion);SystemReflectionMetadataLoadContextVersion=$(_SystemReflectionMetadataLoadContextVersion)">
      <Output TaskParameter="TargetOutputs" ItemName="DependentAssemblyLocations"/>
    </MSBuild>
    <ItemGroup>
      <!-- Don't need Helper.dll -->
      <DependentAssemblyLocations Remove="@(DependentAssemblyLocations)" Condition="'%(FileName)' == 'Helper'" />
      <MonoCecilLocation Include="@(DependentAssemblyLocations->'%(RootDir)%(Directory)')" Condition="'%(FileName)' == 'Mono.Cecil'" />
      <SystemReflectionMetadataLoadContextLocation Include="@(DependentAssemblyLocations->'%(RootDir)%(Directory)')" Condition="'%(FileName)' == 'System.Reflection.MetadataLoadContext'" />
    </ItemGroup>
    <PropertyGroup>
      <PkgMono_Cecil Condition="'$(PkgMono_Cecil)' == ''">@(MonoCecilLocation)</PkgMono_Cecil>
      <PkgMono_Cecil>$([MSBuild]::Unescape($([System.IO.Path]::GetFullPath("$(PkgMono_Cecil)..\..\"))))</PkgMono_Cecil>
      
      <PkgSystem_Reflection_MetadataLoadContext Condition="'$(PkgSystem_Reflection_MetadataLoadContext)' ==''">@(SystemReflectionMetadataLoadContextLocation)</PkgSystem_Reflection_MetadataLoadContext>
      <PkgSystem_Reflection_MetadataLoadContext>$([MSBuild]::Unescape($([System.IO.Path]::GetFullPath("$(PkgSystem_Reflection_MetadataLoadContext)..\..\"))))</PkgSystem_Reflection_MetadataLoadContext>
    </PropertyGroup>
    <RemoveDir Directories="$(_HelperProjectFolder)" />
    </Target>


  <PropertyGroup>
    <AssemblySearchPaths Condition="'$(PkgMono_Cecil)' != ''">
      $(PkgMono_Cecil)\lib\$(_MonoCecilTfm)\;$(AssemblySearchPaths)
    </AssemblySearchPaths>
  </PropertyGroup>
  <UsingTask TaskName="ChangeReferenceAssemblyVersion"
             TaskFactory="RoslynCodeTaskFactory"
             AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <PresentationBuildTasksAssemblyPath ParameterType="System.String" Required="true" />
      <MonoCecilAssemblyLocation ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="$(_MonoCecilDirectory)\Mono.Cecil.dll"/>
      <Reference Include="$(_MonoCecilDirectory)\Mono.Cecil.Mdb.dll"/>
      <Reference Include="$(_MonoCecilDirectory)\Mono.Cecil.Pdb.dll"/>
      <Reference Include="$(_MonoCecilDirectory)\Mono.Cecil.Rocks.dll"/>
      <Reference Include="netstandard" Condition="'$(MSBuildRuntimeType)' == 'Core'" />
      <Using Namespace="System"/>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="Mono.Cecil" />
      <Code Type="class" Language="cs">
        <![CDATA[
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Mono.Cecil;
using System.Reflection;

public class ChangeReferenceAssemblyVersion : Microsoft.Build.Utilities.Task
{
    public ChangeReferenceAssemblyVersion()
    {
        AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(OnAppDomainAssemblyResolve);
    }

    private static void LogMessage(WeakReference<TaskLoggingHelper> weakRefLog, string message)
    {
        if (weakRefLog.TryGetTarget(out TaskLoggingHelper log))
        {
            log.LogMessage(message);
        }
    }

    private static void LogWarning(WeakReference<TaskLoggingHelper> weakRefLog, string message)
    {
        if (weakRefLog.TryGetTarget(out TaskLoggingHelper log))
        {
            log.LogWarning(message);
        }
    }

    private static void LogError(WeakReference<TaskLoggingHelper> weakRefLog, string message)
    {
        if (weakRefLog.TryGetTarget(out TaskLoggingHelper log))
        {
            log.LogError(message);
        }
    }

    private Assembly OnAppDomainAssemblyResolve(object sender, ResolveEventArgs args)
    {
        // Use a WeakReference to the logger - see https://github.com/NuGet/Home/issues/8688
        var weakRefLog = new WeakReference<TaskLoggingHelper>(Log);

        var dllName = args.Name.Split(',')[0].ToLower() + ".dll".ToLower().Trim();
        LogMessage(weakRefLog, "DLL Name: {" + dllName + "}");

        if (dllName.Equals("Mono.Cecil.dll", StringComparison.OrdinalIgnoreCase))
        {
            var dllPath = Path.Combine(MonoCecilAssemblyLocation, "Mono.Cecil.dll");
            LogMessage(weakRefLog, "DLL Path: {" + dllPath + "}");

            if (File.Exists(dllPath))
            {
                LogMessage(weakRefLog, "Exists: " + dllPath);
                return Assembly.LoadFrom(dllPath);
            }
            
            LogError(weakRefLog, "Failed to resolve Mono.Cecil.dll");
        }
        else
        {
            LogMessage(weakRefLog, "Failed to resolve " + dllName);
        }

        return null;
    }

    private string _MonoCecilAssemblyLocation;

    public virtual string MonoCecilAssemblyLocation
    {
        get
        {
            return _MonoCecilAssemblyLocation;
        }
        set
        {
            _MonoCecilAssemblyLocation = value;
        }
    }

    private string _PresentationBuildTasksAssemblyPath;

    public virtual string PresentationBuildTasksAssemblyPath
    {
        get
        {
            return _PresentationBuildTasksAssemblyPath;
        }
        set
        {
            _PresentationBuildTasksAssemblyPath = value;
        }
    }

    private bool _Success = true;

    public virtual bool Success
    {
        get
        {
            return _Success;
        }
        set
        {
            _Success = value;
        }
    }

    public override bool Execute()
    {
        const string SystemReflectionMetadataLoadContext = "System.Reflection.MetadataLoadContext";

        if (!System.IO.File.Exists(PresentationBuildTasksAssemblyPath))
        {
            Log.LogError(PresentationBuildTasksAssemblyPath + " does not exist");
            Success = false;

            return Success;
        }

        var def = AssemblyDefinition.ReadAssembly(PresentationBuildTasksAssemblyPath);

        var sysRefMetadataLoadContextRef = def
            .MainModule
            .AssemblyReferences
            .Where(
            (r) =>
                r.Name.Equals(SystemReflectionMetadataLoadContext, StringComparison.Ordinal) &&
                r.Version == new Version(4, 0, 1, 0))
            .FirstOrDefault();

        if (sysRefMetadataLoadContextRef == null)
        {
            Log.LogError("Cannot find reference to" + SystemReflectionMetadataLoadContext + " in " + PresentationBuildTasksAssemblyPath);
            Success = false;

            return Success;
        }

        Version desiredVersion = new Version(4, 0, 1, 1);
        if (sysRefMetadataLoadContextRef.Version >= desiredVersion)
        {
            Log.LogMessage(PresentationBuildTasksAssemblyPath + " already has a valid reference to " + SystemReflectionMetadataLoadContext + ",Version=" + sysRefMetadataLoadContextRef.Version.ToString());
            return Success;
        }

        def.MainModule.AssemblyReferences.Remove(sysRefMetadataLoadContextRef);
        sysRefMetadataLoadContextRef.Version = desiredVersion;
        def.MainModule.AssemblyReferences.Add(sysRefMetadataLoadContextRef);

        var temp = Path.GetTempFileName();
        def.Write(temp);
        def.Dispose();
        File.Delete(PresentationBuildTasksAssemblyPath);
        File.Move(temp, PresentationBuildTasksAssemblyPath);
        Log.LogMessage("Updated " + PresentationBuildTasksAssemblyPath + " with reference to '" + SystemReflectionMetadataLoadContext + "," + desiredVersion.ToString() + "'");

        return Success;
    }
}
        ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <Target Name="RewritePresentationBuildTasksReferenceToSystemReflectionMetadataLoadContextAssembly"
          Condition="'$(PkgMono_Cecil)' != ''">
    <ChangeReferenceAssemblyVersion PresentationBuildTasksAssemblyPath="$(_PresentationBuildTasksAssembly)" 
                                    MonoCecilAssemblyLocation="$(_MonoCecilDirectory)"/>
  </Target>
  <Target Name="InitWindowsDesktopTempTools" 
          DependsOnTargets="$(InitWindowsDesktopTempToolsDependsOn)" />
</Project>